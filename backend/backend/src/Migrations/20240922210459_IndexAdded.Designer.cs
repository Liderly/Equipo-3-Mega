// <auto-generated />
using System;
using Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20240922210459_IndexAdded")]
    partial class IndexAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Suscriber", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("post_Code")
                        .HasColumnType("int");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("zone_sub")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id");

                    b.HasIndex("post_Code");

                    b.HasIndex("zone_sub");

                    b.HasIndex("last_name", "name");

                    b.ToTable("Subscriptor", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            last_name = "Garcia",
                            name = "Juan",
                            post_Code = 12345,
                            street = "Calle 1",
                            zone_sub = "Zona Norte"
                        },
                        new
                        {
                            id = 2,
                            last_name = "Hernandez",
                            name = "Maria",
                            post_Code = 12346,
                            street = "Calle 2",
                            zone_sub = "Zona Sur"
                        },
                        new
                        {
                            id = 3,
                            last_name = "Lopez",
                            name = "Pedro",
                            post_Code = 12347,
                            street = "Calle 3",
                            zone_sub = "Zona Este"
                        },
                        new
                        {
                            id = 4,
                            last_name = "Martinez",
                            name = "Ana",
                            post_Code = 12348,
                            street = "Calle 4",
                            zone_sub = "Zona Oeste"
                        },
                        new
                        {
                            id = 5,
                            last_name = "Gomez",
                            name = "Luis",
                            post_Code = 12349,
                            street = "Calle 5",
                            zone_sub = "Zona Centro"
                        },
                        new
                        {
                            id = 6,
                            last_name = "Rodriguez",
                            name = "Laura",
                            post_Code = 12350,
                            street = "Calle 6",
                            zone_sub = "Zona Norte"
                        },
                        new
                        {
                            id = 7,
                            last_name = "Perez",
                            name = "Carlos",
                            post_Code = 12351,
                            street = "Calle 7",
                            zone_sub = "Zona Sur"
                        },
                        new
                        {
                            id = 8,
                            last_name = "Ramirez",
                            name = "Elena",
                            post_Code = 12352,
                            street = "Calle 8",
                            zone_sub = "Zona Este"
                        },
                        new
                        {
                            id = 9,
                            last_name = "Sanchez",
                            name = "Miguel",
                            post_Code = 12353,
                            street = "Calle 9",
                            zone_sub = "Zona Oeste"
                        },
                        new
                        {
                            id = 10,
                            last_name = "Torres",
                            name = "Jose",
                            post_Code = 12354,
                            street = "Calle 10",
                            zone_sub = "Zona Centro"
                        },
                        new
                        {
                            id = 11,
                            last_name = "Diaz",
                            name = "Adriana",
                            post_Code = 12355,
                            street = "Calle 11",
                            zone_sub = "Zona Norte"
                        },
                        new
                        {
                            id = 12,
                            last_name = "Gutierrez",
                            name = "Fernando",
                            post_Code = 12356,
                            street = "Calle 12",
                            zone_sub = "Zona Sur"
                        });
                });

            modelBuilder.Entity("backend.Models.Assignment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("service_id")
                        .HasColumnType("int");

                    b.Property<string>("status_assigment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("subscriber_id")
                        .HasColumnType("int");

                    b.Property<int>("technician_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("service_id");

                    b.HasIndex("status_assigment");

                    b.HasIndex("subscriber_id");

                    b.HasIndex("technician_id");

                    b.ToTable("Assignments", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            service_id = 1,
                            status_assigment = "Pendiente",
                            subscriber_id = 1,
                            technician_id = 1
                        },
                        new
                        {
                            id = 2,
                            service_id = 2,
                            status_assigment = "Completado",
                            subscriber_id = 2,
                            technician_id = 2
                        },
                        new
                        {
                            id = 3,
                            service_id = 3,
                            status_assigment = "En Progreso",
                            subscriber_id = 3,
                            technician_id = 3
                        },
                        new
                        {
                            id = 4,
                            service_id = 4,
                            status_assigment = "Pendiente",
                            subscriber_id = 4,
                            technician_id = 4
                        },
                        new
                        {
                            id = 5,
                            service_id = 5,
                            status_assigment = "Completado",
                            subscriber_id = 5,
                            technician_id = 5
                        },
                        new
                        {
                            id = 6,
                            service_id = 6,
                            status_assigment = "En Progreso",
                            subscriber_id = 6,
                            technician_id = 6
                        },
                        new
                        {
                            id = 7,
                            service_id = 7,
                            status_assigment = "Pendiente",
                            subscriber_id = 7,
                            technician_id = 7
                        },
                        new
                        {
                            id = 8,
                            service_id = 8,
                            status_assigment = "Completado",
                            subscriber_id = 8,
                            technician_id = 8
                        },
                        new
                        {
                            id = 9,
                            service_id = 9,
                            status_assigment = "En Progreso",
                            subscriber_id = 9,
                            technician_id = 9
                        },
                        new
                        {
                            id = 10,
                            service_id = 10,
                            status_assigment = "Pendiente",
                            subscriber_id = 10,
                            technician_id = 10
                        },
                        new
                        {
                            id = 11,
                            service_id = 11,
                            status_assigment = "Completado",
                            subscriber_id = 11,
                            technician_id = 11
                        },
                        new
                        {
                            id = 12,
                            service_id = 12,
                            status_assigment = "En Progreso",
                            subscriber_id = 12,
                            technician_id = 12
                        },
                        new
                        {
                            id = 13,
                            service_id = 13,
                            status_assigment = "Pendiente",
                            subscriber_id = 1,
                            technician_id = 1
                        },
                        new
                        {
                            id = 14,
                            service_id = 14,
                            status_assigment = "Completado",
                            subscriber_id = 2,
                            technician_id = 2
                        },
                        new
                        {
                            id = 15,
                            service_id = 15,
                            status_assigment = "En Progreso",
                            subscriber_id = 3,
                            technician_id = 3
                        },
                        new
                        {
                            id = 16,
                            service_id = 16,
                            status_assigment = "Pendiente",
                            subscriber_id = 4,
                            technician_id = 4
                        },
                        new
                        {
                            id = 17,
                            service_id = 17,
                            status_assigment = "Completado",
                            subscriber_id = 5,
                            technician_id = 5
                        },
                        new
                        {
                            id = 18,
                            service_id = 5,
                            status_assigment = "Pendiente",
                            subscriber_id = 6,
                            technician_id = 6
                        },
                        new
                        {
                            id = 19,
                            service_id = 2,
                            status_assigment = "En Progreso",
                            subscriber_id = 7,
                            technician_id = 7
                        },
                        new
                        {
                            id = 20,
                            service_id = 1,
                            status_assigment = "Completado",
                            subscriber_id = 8,
                            technician_id = 8
                        });
                });

            modelBuilder.Entity("backend.Models.Quadrille", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("branch_office")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("quadrille_number")
                        .HasColumnType("int");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("state_quadrille")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("quadrille_number");

                    b.HasIndex("region");

                    b.HasIndex("state_quadrille");

                    b.ToTable("Quadrille", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            branch_office = "Sucursal 1",
                            quadrille_number = 1001,
                            region = "Norte",
                            state_quadrille = "Estado 1"
                        },
                        new
                        {
                            Id = 2,
                            branch_office = "Sucursal 2",
                            quadrille_number = 1002,
                            region = "Sur",
                            state_quadrille = "Estado 2"
                        },
                        new
                        {
                            Id = 3,
                            branch_office = "Sucursal 3",
                            quadrille_number = 1003,
                            region = "Este",
                            state_quadrille = "Estado 3"
                        },
                        new
                        {
                            Id = 4,
                            branch_office = "Sucursal 4",
                            quadrille_number = 1004,
                            region = "Oeste",
                            state_quadrille = "Estado 4"
                        },
                        new
                        {
                            Id = 5,
                            branch_office = "Sucursal 5",
                            quadrille_number = 1005,
                            region = "Centro",
                            state_quadrille = "Estado 5"
                        },
                        new
                        {
                            Id = 6,
                            branch_office = "Sucursal 6",
                            quadrille_number = 1006,
                            region = "Noroeste",
                            state_quadrille = "Estado 6"
                        },
                        new
                        {
                            Id = 7,
                            branch_office = "Sucursal 7",
                            quadrille_number = 1007,
                            region = "Sureste",
                            state_quadrille = "Estado 7"
                        },
                        new
                        {
                            Id = 8,
                            branch_office = "Sucursal 8",
                            quadrille_number = 1008,
                            region = "Noreste",
                            state_quadrille = "Estado 8"
                        },
                        new
                        {
                            Id = 9,
                            branch_office = "Sucursal 9",
                            quadrille_number = 1009,
                            region = "Suroeste",
                            state_quadrille = "Estado 9"
                        },
                        new
                        {
                            Id = 10,
                            branch_office = "Sucursal 10",
                            quadrille_number = 1010,
                            region = "Nororiente",
                            state_quadrille = "Estado 10"
                        },
                        new
                        {
                            Id = 11,
                            branch_office = "Sucursal 11",
                            quadrille_number = 1011,
                            region = "Suroriente",
                            state_quadrille = "Estado 11"
                        },
                        new
                        {
                            Id = 12,
                            branch_office = "Sucursal 12",
                            quadrille_number = 1012,
                            region = "Noroccidente",
                            state_quadrille = "Estado 12"
                        });
                });

            modelBuilder.Entity("backend.Models.ServiceCatalog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description_service")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<int>("points")
                        .HasColumnType("int");

                    b.Property<string>("service_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.HasIndex("points");

                    b.HasIndex("service_name");

                    b.ToTable("ServiceCatalog", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            description_service = "Instalación y activación de línea telefónica residencial.",
                            duration = 2,
                            points = 5,
                            service_name = "Instalación de Línea Telefónica"
                        },
                        new
                        {
                            id = 2,
                            description_service = "Resolución de problemas en la línea telefónica.",
                            duration = 1,
                            points = 4,
                            service_name = "Reparación de Línea Telefónica"
                        },
                        new
                        {
                            id = 3,
                            description_service = "Cambio de número telefónico en la misma línea.",
                            duration = 1,
                            points = 3,
                            service_name = "Cambio de Número Telefónico"
                        },
                        new
                        {
                            id = 4,
                            description_service = "Configuración de funciones en teléfono fijo.",
                            duration = 1,
                            points = 2,
                            service_name = "Configuración de Teléfono Fijo"
                        },
                        new
                        {
                            id = 5,
                            description_service = "Instalación de modem y activación del servicio de internet.",
                            duration = 3,
                            points = 8,
                            service_name = "Instalación de Internet"
                        },
                        new
                        {
                            id = 6,
                            description_service = "Revisión y mantenimiento preventivo del equipo de internet.",
                            duration = 1,
                            points = 3,
                            service_name = "Mantenimiento de Internet"
                        },
                        new
                        {
                            id = 7,
                            description_service = "Configuración de la red Wi-Fi y dispositivos conectados.",
                            duration = 2,
                            points = 6,
                            service_name = "Configuración de Red Wi-Fi"
                        },
                        new
                        {
                            id = 8,
                            description_service = "Cambio de equipo por actualización o mal funcionamiento.",
                            duration = 1,
                            points = 4,
                            service_name = "Cambio de Modem"
                        },
                        new
                        {
                            id = 9,
                            description_service = "Asistencia remota o en sitio para problemas de internet.",
                            duration = 1,
                            points = 3,
                            service_name = "Soporte Técnico de Internet"
                        },
                        new
                        {
                            id = 10,
                            description_service = "Instalación de decodificador y activación de canales básicos.",
                            duration = 2,
                            points = 5,
                            service_name = "Instalación de TV Básica"
                        },
                        new
                        {
                            id = 11,
                            description_service = "Instalación de decodificador y activación de canales premium.",
                            duration = 3,
                            points = 8,
                            service_name = "Instalación de TV Premium"
                        },
                        new
                        {
                            id = 12,
                            description_service = "Resolución de problemas con la señal de televisión.",
                            duration = 1,
                            points = 4,
                            service_name = "Reparación de Señal de TV"
                        },
                        new
                        {
                            id = 13,
                            description_service = "Cambio de equipo por actualización o mal funcionamiento.",
                            duration = 1,
                            points = 4,
                            service_name = "Cambio de Decodificador"
                        },
                        new
                        {
                            id = 14,
                            description_service = "Configuración y personalización de canales de TV.",
                            duration = 1,
                            points = 3,
                            service_name = "Configuración de Canales"
                        },
                        new
                        {
                            id = 15,
                            description_service = "Instalación de servicio de telefonía, internet y TV.",
                            duration = 4,
                            points = 12,
                            service_name = "Paquete Triple Play"
                        },
                        new
                        {
                            id = 16,
                            description_service = "Actualización de servicios combinados de telefonía, internet y TV.",
                            duration = 2,
                            points = 7,
                            service_name = "Actualización de Servicios"
                        },
                        new
                        {
                            id = 17,
                            description_service = "Asistencia técnica para problemas en servicios combinados.",
                            duration = 2,
                            points = 5,
                            service_name = "Soporte Integral de Servicios"
                        });
                });

            modelBuilder.Entity("backend.Models.Technician", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("employee_number")
                        .HasColumnType("int");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("quadrille_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employee_number");

                    b.HasIndex("quadrille_id");

                    b.HasIndex("last_name", "name");

                    b.ToTable("Technicians", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            employee_number = 10001,
                            last_name = "Gomez",
                            name = "Luis",
                            quadrille_id = 1
                        },
                        new
                        {
                            id = 2,
                            employee_number = 10002,
                            last_name = "Rodriguez",
                            name = "Laura",
                            quadrille_id = 2
                        },
                        new
                        {
                            id = 3,
                            employee_number = 10003,
                            last_name = "Perez",
                            name = "Carlos",
                            quadrille_id = 3
                        },
                        new
                        {
                            id = 4,
                            employee_number = 10004,
                            last_name = "Ramirez",
                            name = "Elena",
                            quadrille_id = 4
                        },
                        new
                        {
                            id = 5,
                            employee_number = 10005,
                            last_name = "Sanchez",
                            name = "Miguel",
                            quadrille_id = 5
                        },
                        new
                        {
                            id = 6,
                            employee_number = 10006,
                            last_name = "Torres",
                            name = "Jose",
                            quadrille_id = 6
                        },
                        new
                        {
                            id = 7,
                            employee_number = 10007,
                            last_name = "Diaz",
                            name = "Adriana",
                            quadrille_id = 7
                        },
                        new
                        {
                            id = 8,
                            employee_number = 10008,
                            last_name = "Gutierrez",
                            name = "Fernando",
                            quadrille_id = 8
                        },
                        new
                        {
                            id = 9,
                            employee_number = 10009,
                            last_name = "Mendez",
                            name = "Sofia",
                            quadrille_id = 9
                        },
                        new
                        {
                            id = 10,
                            employee_number = 10010,
                            last_name = "Ortega",
                            name = "Ricardo",
                            quadrille_id = 10
                        },
                        new
                        {
                            id = 11,
                            employee_number = 10011,
                            last_name = "Martinez",
                            name = "Paola",
                            quadrille_id = 11
                        },
                        new
                        {
                            id = 12,
                            employee_number = 10012,
                            last_name = "Gonzalez",
                            name = "David",
                            quadrille_id = 12
                        });
                });

            modelBuilder.Entity("backend.Models.Assignment", b =>
                {
                    b.HasOne("backend.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany("Assignments")
                        .HasForeignKey("service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Suscriber", "Subscriptor")
                        .WithMany("Assignments")
                        .HasForeignKey("subscriber_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Technician", "Technician")
                        .WithMany("Assignments")
                        .HasForeignKey("technician_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCatalog");

                    b.Navigation("Subscriptor");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("backend.Models.Technician", b =>
                {
                    b.HasOne("backend.Models.Quadrille", "Quadrille")
                        .WithMany("Technicians")
                        .HasForeignKey("quadrille_id");

                    b.Navigation("Quadrille");
                });

            modelBuilder.Entity("Backend.Models.Suscriber", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("backend.Models.Quadrille", b =>
                {
                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("backend.Models.ServiceCatalog", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("backend.Models.Technician", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
